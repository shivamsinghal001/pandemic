from ..environment import PandemicObservation, PandemicSimConfig, PandemicSimState
from .pandemic_viz import PandemicViz
from _typeshed import Incomplete
from matplotlib.axes import Axes
from typing import Any, List, Optional, Sequence

class PlotType:
    global_infection_summary: str
    global_testing_summary: str
    critical_summary: str
    stages: str
    location_assignee_visits: str
    location_visitor_visits: str
    infection_source: str
    cumulative_reward: str
    cumulative_true_reward: str
    @staticmethod
    def plot_order() -> List[str]: ...

class BaseMatplotLibViz(PandemicViz):
    def __init__(self, num_persons: int, max_hospital_capacity: Optional[int] = ...) -> None: ...
    @classmethod
    def from_config(cls, sim_config: PandemicSimConfig) -> BaseMatplotLibViz: ...
    def record_obs(self, obs: PandemicObservation) -> None: ...
    def record_state(self, state: PandemicSimState) -> None: ...
    def record(self, data: Any) -> None: ...
    def plot_gis(self, ax: Optional[Axes] = ..., **kwargs: Any) -> None: ...
    def plot_gts(self, ax: Optional[Axes] = ..., **kwargs: Any) -> None: ...
    def plot_critical_summary(self, ax: Optional[Axes] = ..., **kwargs: Any) -> None: ...
    def plot_stages(self, ax: Optional[Axes] = ..., **kwargs: Any) -> None: ...
    @staticmethod
    def annotate_plot(ax: Axes, label: str) -> None: ...
    def plot(self, name=..., plots_to_show: Optional[Sequence[str]] = ..., *args: Any, **kwargs: Any) -> None: ...

class SimViz(BaseMatplotLibViz):
    def __init__(self, num_persons: int, max_hospital_capacity: Optional[int] = ...) -> None: ...
    def record_state(self, state: PandemicSimState) -> None: ...
    def plot_location_assignee_visits(self, ax: Optional[Axes] = ..., **kwargs: Any) -> None: ...
    def plot_location_visitor_visits(self, ax: Optional[Axes] = ..., **kwargs: Any) -> None: ...
    def plot_infection_source(self, ax: Optional[Axes] = ..., **kwargs: Any) -> None: ...

class GymViz(BaseMatplotLibViz):
    def __init__(self, num_persons: int, max_hospital_capacity: Optional[int] = ...) -> None: ...
    def plot_cumulative_reward(self, ax: Optional[Axes] = ..., **kwargs: Any) -> None: ...
    def plot_cumulative_true_reward(self, ax: Optional[Axes] = ..., **kwargs: Any) -> None: ...
    def plot_gis(self, ax: Optional[Axes] = ..., **kwargs: Any) -> None: ...
    def plot_gts(self, ax: Optional[Axes] = ..., **kwargs: Any) -> None: ...
    def plot_critical_summary(self, ax: Optional[Axes] = ..., **kwargs: Any) -> None: ...
    def plot_stages(self, ax: Optional[Axes] = ..., **kwargs: Any) -> None: ...
    @staticmethod
    def annotate_plot(ax: Axes, label: str) -> None: ...
    def plot(self, epoch: Incomplete | None = ..., name=..., plots_to_show: Optional[Sequence[str]] = ..., *args: Any, **kwargs: Any) -> None: ...
    def record(self, data: Any) -> None: ...
    def record_list(self, obs, gis, gts, stage, rew, true_rew) -> None: ...
    def reset(self) -> None: ...
