from .interfaces import InfectionSummary, Location, LocationID, LocationSummary, PandemicTestResult, Person, PersonID, Registry, SimTime, SimTimeTuple
from typing import List, Mapping, Optional, Set, Tuple, Type, Union

class CityRegistry(Registry):
    IGNORE_LOCS_SUMMARY: Set[Type]
    def __init__(self) -> None: ...
    def register_location(self, location: Location) -> None: ...
    def register_person(self, person: Person) -> None: ...
    def register_person_entry_in_location(self, person_id: PersonID, location_id: LocationID) -> bool: ...
    def update_location_specific_information(self) -> None: ...
    def reassign_locations(self, person: Person) -> None: ...
    @property
    def person_ids(self) -> Set[PersonID]: ...
    @property
    def location_ids(self) -> Set[LocationID]: ...
    @property
    def location_ids_with_social_events(self) -> List[LocationID]: ...
    @property
    def location_types(self) -> Set[str]: ...
    @property
    def global_location_summary(self) -> Mapping[Tuple[str, str], LocationSummary]: ...
    def location_ids_of_type(self, location_type: Union[type, Tuple[type, ...]]) -> Tuple[LocationID, ...]: ...
    def get_persons_in_location(self, location_id: LocationID) -> Set[PersonID]: ...
    def location_id_to_type(self, location_id: LocationID) -> Type: ...
    def get_location_work_time(self, location_id: LocationID) -> SimTimeTuple: ...
    def is_location_open_for_visitors(self, location_id: LocationID, sim_time: SimTime) -> bool: ...
    def get_person_home_id(self, person_id: PersonID) -> LocationID: ...
    def get_households(self, person_id: PersonID) -> Set[PersonID]: ...
    def get_person_infection_summary(self, person_id: PersonID) -> Optional[InfectionSummary]: ...
    def get_person_test_result(self, person_id: PersonID) -> PandemicTestResult: ...
    def quarantine_person(self, person_id: PersonID) -> None: ...
    def clear_quarantined(self, person_id: PersonID) -> None: ...
    def get_person_quarantined_state(self, person_id: PersonID) -> bool: ...
