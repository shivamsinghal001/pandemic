from .ids import LocationID, PersonID
from .location import Location
from .location_rules import LocationRule
from .sim_time import SimTime
from _typeshed import Incomplete
from abc import ABCMeta
from typing import Optional, Union

class BaseLocation(Location[_State], metaclass=ABCMeta):
    location_rule_type: Incomplete
    def __init__(self, loc_id: Union[str, LocationID, None] = ..., init_state: Optional[_State] = ...) -> None: ...
    @property
    def id(self) -> LocationID: ...
    @property
    def init_state(self) -> _State: ...
    @property
    def state(self) -> _State: ...
    def sync(self, sim_time: SimTime) -> None: ...
    def update_rules(self, new_rule: LocationRule) -> None: ...
    def is_entry_allowed(self, person_id: PersonID) -> bool: ...
    def assign_person(self, person_id: PersonID) -> None: ...
    def add_person_to_location(self, person_id: PersonID) -> None: ...
    def remove_person_from_location(self, person_id: PersonID) -> None: ...
    def reset(self) -> None: ...
